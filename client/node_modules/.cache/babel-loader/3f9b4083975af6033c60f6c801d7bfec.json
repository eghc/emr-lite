{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Documents/Bloc/capstone__/client/src/views/UserList/index.jsx\";\nimport React, { Component } from 'react'; // Externals\n\nimport PropTypes from 'prop-types'; // Material helpers\n\nimport { withStyles } from '@material-ui/core'; // Material components\n\nimport { CircularProgress, Typography } from '@material-ui/core'; // Shared layouts\n\nimport { Dashboard as DashboardLayout } from 'layouts'; // Shared services\n\nimport { getUsers } from 'services/user'; // Custom components\n\nimport { UsersToolbar, UsersTable } from './components'; // Component styles\n\nimport styles from './style';\n\nclass UserList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.signal = true;\n    this.state = {\n      isLoading: false,\n      limit: 25,\n      users: [],\n      selectedUsers: [],\n      error: null\n    };\n\n    this.handleSelect = selectedUsers => {\n      this.setState({\n        selectedUsers\n      });\n    };\n  }\n\n  //\n  // async getUsers() {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //\n  //     const { limit } = this.state;\n  //\n  //     const { users } = await getUsers(limit);\n  //\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         users\n  //       });\n  //     }\n  //   } catch (error) {\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         error\n  //       });\n  //     }\n  //   }\n  // }\n  componentDidMount() {\n    this.signal = true; //this.getUsers();\n    //this.setState({ isLoading: true });\n    //console.log(this.state.limit);\n\n    this.getPatients(0, this.state.limit).then(res => {\n      this.setState({\n        users: res\n      });\n      console.log(res);\n    }).catch(err => console.log(err));\n  }\n\n  async getPatients(begin, limit) {\n    const response = await fetch('/getPatients/' + begin + '/' + limit);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  renderUsers() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          users = _this$state.users,\n          error = _this$state.error;\n\n    if (isLoading) {\n      return React.createElement(\"div\", {\n        className: classes.progressWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }));\n    }\n\n    if (error) {\n      return React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, error);\n    }\n\n    if (users.length === 0) {\n      return React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"There are no users\");\n    }\n\n    return React.createElement(UsersTable //\n    , {\n      onSelect: this.handleSelect,\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const selectedUsers = this.state.selectedUsers;\n    return React.createElement(DashboardLayout, {\n      title: \"Patients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(UsersToolbar, {\n      selectedUsers: selectedUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.renderUsers())));\n  }\n\n}\n\nUserList.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(UserList);","map":{"version":3,"sources":["/Users/macuser/Documents/Bloc/capstone__/client/src/views/UserList/index.jsx"],"names":["React","Component","PropTypes","withStyles","CircularProgress","Typography","Dashboard","DashboardLayout","getUsers","UsersToolbar","UsersTable","styles","UserList","signal","state","isLoading","limit","users","selectedUsers","error","handleSelect","setState","componentDidMount","getPatients","then","res","console","log","catch","err","begin","response","fetch","body","json","status","Error","message","componentWillUnmount","renderUsers","classes","props","progressWrapper","length","render","root","content","propTypes","className","string","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// Externals\nimport PropTypes from 'prop-types';\n\n// Material helpers\nimport { withStyles } from '@material-ui/core';\n\n// Material components\nimport { CircularProgress, Typography } from '@material-ui/core';\n\n// Shared layouts\nimport { Dashboard as DashboardLayout } from 'layouts';\n\n// Shared services\nimport { getUsers } from 'services/user';\n\n// Custom components\nimport { UsersToolbar, UsersTable } from './components';\n\n// Component styles\nimport styles from './style';\n\nclass UserList extends Component {\n  signal = true;\n\n  state = {\n    isLoading: false,\n    limit: 25,\n    users: [],\n    selectedUsers: [],\n    error: null\n  };\n  //\n  // async getUsers() {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //\n  //     const { limit } = this.state;\n  //\n  //     const { users } = await getUsers(limit);\n  //\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         users\n  //       });\n  //     }\n  //   } catch (error) {\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         error\n  //       });\n  //     }\n  //   }\n  // }\n\n\n  componentDidMount() {\n    this.signal = true;\n    //this.getUsers();\n\n    //this.setState({ isLoading: true });\n    //console.log(this.state.limit);\n    this.getPatients(0,this.state.limit)\n      .then((res) => {\n        this.setState({ users: res});\n        console.log(res);\n      })\n      .catch(err => console.log(err));\n\n  }\n\n  async getPatients (begin, limit){\n    const response = await fetch('/getPatients/' + begin + '/'+ limit );\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  handleSelect = selectedUsers => {\n    this.setState({ selectedUsers });\n  };\n\n  renderUsers() {\n    const { classes } = this.props;\n    const { isLoading, users, error } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className={classes.progressWrapper}>\n          <CircularProgress />\n        </div>\n      );\n    }\n\n    if (error) {\n      return <Typography variant=\"h6\">{error}</Typography>;\n    }\n\n    if (users.length === 0) {\n      return <Typography variant=\"h6\">There are no users</Typography>;\n    }\n\n    return (\n      <UsersTable\n        //\n        onSelect={this.handleSelect}\n        users={users}\n      />\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { selectedUsers } = this.state;\n\n    return (\n      <DashboardLayout title=\"Patients\">\n        <div className={classes.root}>\n          <UsersToolbar selectedUsers={selectedUsers} />\n          <div className={classes.content}>{this.renderUsers()}</div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nUserList.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(UserList);\n"]},"metadata":{},"sourceType":"module"}