{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Documents/Bloc/capstone__/client/src/views/UserList/index.jsx\";\nimport React, { Component } from 'react'; // Externals\n\nimport PropTypes from 'prop-types'; // Material helpers\n\nimport { withStyles } from '@material-ui/core'; // Material components\n\nimport { CircularProgress, Typography } from '@material-ui/core'; // Shared layouts\n\nimport { Dashboard as DashboardLayout } from 'layouts'; // Shared services\n\nimport { getUsers } from 'services/user'; // Custom components\n\nimport { UsersToolbar, UsersTable } from './components'; // Component styles\n\nimport styles from './style';\n\nclass UserList extends Component {\n  constructor(props) {\n    super(props);\n    this.signal = true;\n\n    this.handleSelect = selectedUsers => {\n      this.setState({\n        selectedUsers\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      limit: 40,\n      users: [],\n      selectedUsers: [],\n      searchedUsers: [],\n      error: null,\n      query: null,\n      isQuerying: false\n    };\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  } //\n  // async getUsers() {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //\n  //     const { limit } = this.state;\n  //\n  //     const { users } = await getUsers(limit);\n  //\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         users\n  //       });\n  //     }\n  //   } catch (error) {\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         error\n  //       });\n  //     }\n  //   }\n  // }\n\n\n  componentDidMount() {\n    this.signal = true; //this.getUsers();\n    //this.setState({ isLoading: true });\n    //console.log(this.state.limit);\n\n    this.setState({\n      isLoading: true\n    });\n    this.getPatients(0, this.state.limit).then(res => {\n      this.setState({\n        users: res\n      });\n      console.log(res);\n      this.setState({\n        isLoading: false\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  async getPatients(begin, limit) {\n    const response = await fetch('/getPatients/' + begin + '/' + limit);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  }\n\n  async getSearchPatients(query) {\n    const response = await fetch('/getPatients/' + query);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  }\n\n  // componentWillUpdate(){\n  //   if(this.state.isQuerying){\n  //     this.getSearchPatients(this.state.query)\n  //       .then((res) => {\n  //         console.log(res);\n  //         this.setState({ users: res});\n  //         this.setState({isQuerying: false});\n  //\n  //       })\n  //       .catch((err) => {\n  //         this.setState({isQuerying: false});\n  //         console.log(err);\n  //       });\n  //   }\n  //this.getUsers();\n  //this.setState({ isLoading: true });\n  //console.log(this.state.limit)\n  //}\n  handleKeyDown(e) {\n    const that = this;\n\n    if (e.key === 'Enter') {\n      //console.log('do validate');\n      let value = e.target.value;\n      console.log(value);\n      this.setState({\n        query: value\n      }); // this.setState({isQuerying: true});\n\n      this.getSearchPatients(value).then(res => {\n        console.log(res);\n        this.setState({\n          users: res\n        }, () => {\n          console.log(this.state.users);\n        });\n      }); // this.getSearchPatients(value)\n      //   .then((res) => {\n      //     this.setState({ users: res});\n      //     console.log(res);\n      //     //this.setState({ isLoading: false});\n      //   })\n      //   .catch((err) => {\n      //     console.log(err);\n      //     //this.setState({ isLoading: false });\n      //   });\n    }\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  renderUsers() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          error = _this$state.error,\n          users = _this$state.users; //let users = this.state.searchedUsers.length == 0 ? this.state.users : this.state.searchedUsers;\n    //console.log(users);\n\n    if (isLoading) {\n      return React.createElement(\"div\", {\n        className: classes.progressWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }));\n    }\n\n    if (error) {\n      return React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, error);\n    }\n\n    if (users.length === 0) {\n      return React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"There are no users\");\n    }\n\n    return React.createElement(UsersTable //\n    , {\n      onSelect: this.handleSelect,\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const selectedUsers = this.state.selectedUsers;\n    return React.createElement(DashboardLayout, {\n      title: \"Patients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(UsersToolbar, {\n      selectedUsers: selectedUsers,\n      handleKeyDown: this.handleKeyDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, this.renderUsers())));\n  }\n\n}\n\nUserList.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(UserList);","map":{"version":3,"sources":["/Users/macuser/Documents/Bloc/capstone__/client/src/views/UserList/index.jsx"],"names":["React","Component","PropTypes","withStyles","CircularProgress","Typography","Dashboard","DashboardLayout","getUsers","UsersToolbar","UsersTable","styles","UserList","constructor","props","signal","handleSelect","selectedUsers","setState","state","isLoading","limit","users","searchedUsers","error","query","isQuerying","handleKeyDown","bind","componentDidMount","getPatients","then","res","console","log","catch","err","begin","response","fetch","body","json","status","Error","message","getSearchPatients","e","that","key","value","target","componentWillUnmount","renderUsers","classes","progressWrapper","length","render","root","content","propTypes","className","string","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// Externals\nimport PropTypes from 'prop-types';\n\n// Material helpers\nimport { withStyles } from '@material-ui/core';\n\n// Material components\nimport { CircularProgress, Typography } from '@material-ui/core';\n\n// Shared layouts\nimport { Dashboard as DashboardLayout } from 'layouts';\n\n// Shared services\nimport { getUsers } from 'services/user';\n\n// Custom components\nimport { UsersToolbar, UsersTable } from './components';\n\n// Component styles\nimport styles from './style';\n\nclass UserList extends Component {\n  signal = true;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      limit: 40,\n      users: [],\n      selectedUsers: [],\n      searchedUsers: [],\n      error: null,\n      query: null,\n      isQuerying: false\n    };\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n  //\n  // async getUsers() {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //\n  //     const { limit } = this.state;\n  //\n  //     const { users } = await getUsers(limit);\n  //\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         users\n  //       });\n  //     }\n  //   } catch (error) {\n  //     if (this.signal) {\n  //       this.setState({\n  //         isLoading: false,\n  //         error\n  //       });\n  //     }\n  //   }\n  // }\n\n\n  componentDidMount() {\n    this.signal = true;\n    //this.getUsers();\n\n    //this.setState({ isLoading: true });\n    //console.log(this.state.limit);\n    this.setState({ isLoading: true });\n    this.getPatients(0,this.state.limit)\n      .then((res) => {\n        this.setState({ users: res});\n        console.log(res);\n        this.setState({ isLoading: false});\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({ isLoading: false });\n      });\n\n  }\n\n  async getPatients (begin, limit){\n    const response = await fetch('/getPatients/' + begin + '/'+ limit );\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  async getSearchPatients (query){\n    const response = await fetch('/getPatients/' + query);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  // componentWillUpdate(){\n  //   if(this.state.isQuerying){\n  //     this.getSearchPatients(this.state.query)\n  //       .then((res) => {\n  //         console.log(res);\n  //         this.setState({ users: res});\n  //         this.setState({isQuerying: false});\n  //\n  //       })\n  //       .catch((err) => {\n  //         this.setState({isQuerying: false});\n  //         console.log(err);\n  //       });\n  //   }\n    //this.getUsers();\n\n    //this.setState({ isLoading: true });\n    //console.log(this.state.limit)\n  //}\n\n  handleKeyDown(e) {\n    const that = this;\n    if (e.key === 'Enter') {\n      //console.log('do validate');\n      let value = e.target.value;\n      console.log(value);\n      this.setState({query: value});\n      // this.setState({isQuerying: true});\n\n      this.getSearchPatients(value)\n      .then((res) =>{\n        console.log(res);\n        this.setState({users: res}, ()=>{\n          console.log(this.state.users)\n        });\n\n      });\n\n      // this.getSearchPatients(value)\n      //   .then((res) => {\n      //     this.setState({ users: res});\n      //     console.log(res);\n      //     //this.setState({ isLoading: false});\n      //   })\n      //   .catch((err) => {\n      //     console.log(err);\n      //     //this.setState({ isLoading: false });\n      //   });\n    }\n  };\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  handleSelect = selectedUsers => {\n    this.setState({ selectedUsers });\n  };\n\n  renderUsers() {\n    const { classes } = this.props;\n    const { isLoading, error, users } = this.state;\n\n    //let users = this.state.searchedUsers.length == 0 ? this.state.users : this.state.searchedUsers;\n    //console.log(users);\n\n    if (isLoading) {\n      return (\n        <div className={classes.progressWrapper}>\n          <CircularProgress />\n        </div>\n      );\n    }\n\n    if (error) {\n      return <Typography variant=\"h6\">{error}</Typography>;\n    }\n\n    if (users.length === 0) {\n      return <Typography variant=\"h6\">There are no users</Typography>;\n    }\n\n\n\n    return (\n      <UsersTable\n        //\n        onSelect={this.handleSelect}\n        users= {users}\n      />\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { selectedUsers } = this.state;\n\n    return (\n      <DashboardLayout title=\"Patients\">\n        <div className={classes.root}>\n          <UsersToolbar selectedUsers={selectedUsers} handleKeyDown={this.handleKeyDown} />\n          <div className={classes.content}>{this.renderUsers()}</div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nUserList.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(UserList);\n"]},"metadata":{},"sourceType":"module"}