{"ast":null,"code":"// Mock data\nimport users from 'data/users';\nimport orders from 'data/orders';\n\nfunction lookupUser(user) {\n  const userCopy = JSON.parse(JSON.stringify(user));\n  const userOrders = userCopy.orders.map(id => orders.find(order => order.id === id));\n  const userMoneySpent = userCopy.orders.reduce((total, order) => total + order.amount, 0);\n  userCopy.orders = userOrders;\n  userCopy.moneySpent = userMoneySpent;\n  return userCopy;\n}\n\nexport const getUsers = (limit = 10) => {\n  this.callBackendAPI().then(res => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const usersLookup = users.slice(0, limit).map(lookupUser);\n        resolve({\n          users: usersLookup,\n          usersTotal: users.length\n        });\n      }, 700);\n    });\n  }).catch(err => console.log(err));\n  return;\n};\n\nasync function callBackendAPI() {\n  const response = await fetch('http://localhost:5000/getPatients');\n  const body = await response.json();\n\n  if (response.status !== 200) {\n    throw Error(body.message);\n  }\n\n  return body;\n}\n\n;\nexport const getUser = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = users.find(user => user.id === id);\n\n      if (user) {\n        resolve({\n          user: lookupUser(user)\n        });\n      } else {\n        reject({\n          error: 'User not found'\n        });\n      }\n    }, 500);\n  });\n};","map":{"version":3,"sources":["/Users/macuser/Documents/Bloc/capstone__/client/src/services/user/index.js"],"names":["users","orders","lookupUser","user","userCopy","JSON","parse","stringify","userOrders","map","id","find","order","userMoneySpent","reduce","total","amount","moneySpent","getUsers","limit","callBackendAPI","then","res","Promise","resolve","setTimeout","usersLookup","slice","usersTotal","length","catch","err","console","log","response","fetch","body","json","status","Error","message","getUser","reject","error"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,IAAf,CAAX,CAAjB;AACA,QAAMK,UAAU,GAAGJ,QAAQ,CAACH,MAAT,CAAgBQ,GAAhB,CAAoBC,EAAE,IACvCT,MAAM,CAACU,IAAP,CAAYC,KAAK,IAAIA,KAAK,CAACF,EAAN,KAAaA,EAAlC,CADiB,CAAnB;AAGA,QAAMG,cAAc,GAAGT,QAAQ,CAACH,MAAT,CAAgBa,MAAhB,CACrB,CAACC,KAAD,EAAQH,KAAR,KAAkBG,KAAK,GAAGH,KAAK,CAACI,MADX,EAErB,CAFqB,CAAvB;AAKAZ,EAAAA,QAAQ,CAACH,MAAT,GAAkBO,UAAlB;AACAJ,EAAAA,QAAQ,CAACa,UAAT,GAAsBJ,cAAtB;AAEA,SAAOT,QAAP;AACD;;AAED,OAAO,MAAMc,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AACtC,OAAKC,cAAL,GACKC,IADL,CACUC,GAAG,IAAI;AACX,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,MAAAA,UAAU,CAAC,MAAM;AACf,cAAMC,WAAW,GAAG1B,KAAK,CAAC2B,KAAN,CAAY,CAAZ,EAAeR,KAAf,EAAsBV,GAAtB,CAA0BP,UAA1B,CAApB;AAEAsB,QAAAA,OAAO,CAAC;AACNxB,UAAAA,KAAK,EAAE0B,WADD;AAENE,UAAAA,UAAU,EAAE5B,KAAK,CAAC6B;AAFZ,SAAD,CAAP;AAID,OAPS,EAOP,GAPO,CAAV;AAQD,KATM,CAAP;AAUD,GAZL,EAYOC,KAZP,CAYaC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAZpB;AAcA;AACD,CAhBM;;AAkBP,eAAeX,cAAf,GAAgC;AAC5B,QAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACD;;AACD,SAAOJ,IAAP;AACD;;AAAA;AAEH,OAAO,MAAMK,OAAO,GAAG/B,EAAE,IAAI;AAC3B,SAAO,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUkB,MAAV,KAAqB;AACtCjB,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMtB,IAAI,GAAGH,KAAK,CAACW,IAAN,CAAWR,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYA,EAA/B,CAAb;;AAEA,UAAIP,IAAJ,EAAU;AACRqB,QAAAA,OAAO,CAAC;AACNrB,UAAAA,IAAI,EAAED,UAAU,CAACC,IAAD;AADV,SAAD,CAAP;AAGD,OAJD,MAIO;AACLuC,QAAAA,MAAM,CAAC;AACLC,UAAAA,KAAK,EAAE;AADF,SAAD,CAAN;AAGD;AACF,KAZS,EAYP,GAZO,CAAV;AAaD,GAdM,CAAP;AAeD,CAhBM","sourcesContent":["// Mock data\nimport users from 'data/users';\nimport orders from 'data/orders';\n\nfunction lookupUser(user) {\n  const userCopy = JSON.parse(JSON.stringify(user));\n  const userOrders = userCopy.orders.map(id =>\n    orders.find(order => order.id === id)\n  );\n  const userMoneySpent = userCopy.orders.reduce(\n    (total, order) => total + order.amount,\n    0\n  );\n\n  userCopy.orders = userOrders;\n  userCopy.moneySpent = userMoneySpent;\n\n  return userCopy;\n}\n\nexport const getUsers = (limit = 10) => {\n  this.callBackendAPI()\n      .then(res => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const usersLookup = users.slice(0, limit).map(lookupUser);\n\n            resolve({\n              users: usersLookup,\n              usersTotal: users.length\n            });\n          }, 700);\n        });\n      }).catch(err => console.log(err));\n\n  return\n};\n\nasync function callBackendAPI (){\n    const response = await fetch('http://localhost:5000/getPatients');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\nexport const getUser = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = users.find(user => user.id === id);\n\n      if (user) {\n        resolve({\n          user: lookupUser(user)\n        });\n      } else {\n        reject({\n          error: 'User not found'\n        });\n      }\n    }, 500);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}